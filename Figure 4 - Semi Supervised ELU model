import numpy as np
from numpy.random import default_rng
from scipy.stats import norm
from scipy.stats import t
from scipy.stats import uniform

rng = default_rng()

import matplotlib.pyplot as plt


########### Setting:
p=10
n=50
N=5*10**4
b=2


mu=np.zeros(p)
rho=0.9
Sigma=np.zeros((p,p))
r = 5 #number of blocks
block = p/r #size of a block

for j in range(r):
    i0 = j*block
    i1 = (j+1)*block-1
    i0=int(i0)
    i1=int(i1)
    Sigma[i0:i1+1,i0:i1+1] = rho


Sigma=Sigma+np.eye(p)*(1-rho)

Xst = rng.multivariate_normal(mu,Sigma,N)
Sigma1= Xst.transpose()@Xst/N
Sigma1_inv=np.linalg.inv(Sigma1)

Zst=b*np.sum(Xst,1)

############ Definition for the Link Function
A_Vals=[1,4]
A_lev=2

def g(z,a):
    return z*(z>0)+(z<0)*a*(np.exp(z/a)-1)

def g_inv(z,a):
    return z*(z>0)+(z<0)*a*np.log(z/a+1)

def g_tag(z,a):
    return 1*(z>0)+(z<0)*np.exp(z/a)

def G(z,a):
    return (z>0)*0.5*z**2+(z<0)*(a**2)*(np.exp(z/a)-z/a-1)

Samp_size=4*10**3

ones_n=np.ones((n,1))
X_m=np.zeros((p,1))


################# Full simulation:
mini_samp=100
maxIter=10
StopCrit=0.001
M=5000

ones_M=np.ones((M,1))
X0_m=np.zeros((p,1))

sig_lev=9

Sig_Vals=np.zeros((sig_lev,A_lev))

test_sup=np.empty((Samp_size,sig_lev,A_lev))
test_semi1=np.empty((Samp_size,sig_lev,A_lev))
test_semi2=np.empty((Samp_size,sig_lev,A_lev))

test_null=np.empty((Samp_size,sig_lev,A_lev))

test_Hyb=np.empty((Samp_size,sig_lev,A_lev))
test_Hyb2=np.empty((Samp_size,sig_lev,A_lev))

test_Fs1=np.empty((Samp_size,sig_lev,A_lev))
test_Fs2=np.empty((Samp_size,sig_lev,A_lev))
test_sigs3=np.empty((Samp_size,sig_lev,A_lev))

#################################################### Main Loop

for Al in range(A_lev):
  a=A_Vals[Al]
  mtes=g(Zst,a)
  dtes=g_tag(Zst,a)
  mu0=np.mean(mtes)

  Rb= np.mean( G(Zst,a)-mtes*Zst )

  if a==1:
    sig_val0=10
    sig_step=6

  if a==4:
    sig_val0=30
    sig_step=8


  for i in range(Samp_size):
    tr_id=rng.choice(range(N),size=n, replace=False)
    tr_id_s=rng.choice(range(N),size=M, replace=False)

    X = Xst[tr_id,:]
    X0= Xst[tr_id_s,:]
    ymeans=mtes[tr_id]



    for sig in range(sig_lev):
      sige=np.sqrt(sig_val0+sig_step*sig+sig**2/4)
      Sig_Vals[sig,Al]=sige
      y=ymeans + rng.standard_normal(n)*sige
      yh_null=np.mean(y)

      beta0=np.zeros(p)+b

  ############# supervised Newton-Raphson:
      beta_OLS=beta0
      j=1
      zvec=X@beta_OLS
      D_n=np.diag(g_tag(zvec,a))
      S=(X.transpose())@(y-g(zvec,a))
      H=-(X.transpose())@D_n@X
      norm=np.linalg.norm(S,2)
      while j<maxIter and norm>StopCrit:
        beta_OLS=beta_OLS-(np.linalg.inv(H))@S
        zvec=X@beta_OLS

        D_n=np.diag(g_tag(zvec,a))
        S=(X.transpose())@(y-g(zvec,a))
        H=-(X.transpose())@D_n@X
        norm=np.linalg.norm(S,2)

        j+=1

  ############# Semi-supervised_Tilde Newton-Raphson:
      beta_SOLS1=beta0
      j=1
      zvec=X0@beta_SOLS1
      D_M=np.diag(g_tag(zvec,a))
      S=(X.transpose())@y/n - (X0.transpose())@g(zvec,a)/M
      H=-(X0.transpose())@D_M@X0/M
      norm=np.linalg.norm(S,2)
      while j<maxIter and norm>StopCrit:
        beta_SOLS1=beta_SOLS1- (np.linalg.inv(H))@S
        zvec=X0@beta_SOLS1

        D_M=np.diag(g_tag(zvec,a))
        S=(X.transpose())@y/n - (X0.transpose())@g(zvec,a)/M
        H=-(X0.transpose())@D_M@X0/M
        norm=np.linalg.norm(S,2)

        j+=1

  ############# Semi-supervised_Breve Newton-Raphson:
      beta_SOLS2=beta0
      j=1
      zvec=X0@beta_SOLS2
      D_M=np.diag(g_tag(zvec,a))

      X_m[:,0]=np.mean(X,0)
      mean_mat=(ones_n)@(X_m.transpose())
      cov_Xy=( (X-mean_mat).transpose())@( y-np.mean(y) )/n

      S= cov_Xy - (X0.transpose())@g(zvec,a)/M
      H=-(X0.transpose())@D_M@X0/M
      norm=np.linalg.norm(S,2)
      while j<maxIter and norm>StopCrit:
        beta_SOLS2=beta_SOLS2-(np.linalg.inv(H))@S
        zvec=X0@beta_SOLS2

        D_M=np.diag(g_tag(zvec,a))
        S=cov_Xy - (X0.transpose())@g(zvec,a)/M
        H=-(X0.transpose())@D_M@X0/M
        norm=np.linalg.norm(S,2)

        j+=1

  ################################ Estimating sigma^2:
      zh=X@beta_OLS
      yh=g(zh,a)
      RSS=np.sum( (yh-y)**2 )

      ########### estimating t-values:
      Z_b=X0@beta_SOLS2
      mtes_b=g(Z_b,a)
      dtes_b=g_tag(Z_b,a)
      mu0_b=np.mean(mtes_b)

      D_b=np.diag(dtes_b)

      H_mat_b=(X0.transpose())@D_b@X0*(n/M)

      H_mat_inv_b=np.linalg.inv(H_mat_b)

      Sigma1_b=X0.transpose()@X0/M

      t1_b= ((H_mat_inv_b@Sigma1_b).trace())*n

      Xmu_e=(X0.transpose())@mtes_b*(n/M)

      t22_b=(Xmu_e.transpose() )@H_mat_inv_b@Xmu_e

      tsig_b=0
      t21_b=0
      V0=0

      Q=np.zeros((p,p))
      HD=np.zeros((p,p))

      for k in range(mini_samp):
        tr_id_b=rng.choice(range(M),size=n, replace=False)
        Xb = X0[tr_id_b,:]

        zvec_b=Xb@beta_SOLS2
        D_b=np.diag(g_tag(zvec_b,a))
        mu_b=g(zvec_b,a)
        mat0=(Xb.transpose())@D_b@Xb
        mat1=np.linalg.inv(mat0 )
        mat2=mat1@(Xb.transpose())@Xb@mat1
        mat3=mat2@(Xb.transpose())@D_b@D_b@Xb

        V0+=((Xb.transpose())@Xb@mat1).trace()

        Q+=mat2
        HD+=mat0@H_mat_inv_b@mat0
        tsig_b+=mat3.trace()

        vz=(Xb.transpose())@mu_b
        t21_b+=(vz.transpose())@H_mat_inv_b@vz

      V0=V0/mini_samp
      Q=Q/mini_samp
      HD=HD/mini_samp

      HDH=HD-H_mat_b
      t21_b=t21_b/mini_samp

      t0_b=(H_mat_b@Q).trace()

      tsig_b=tsig_b/mini_samp
      sig_h=RSS/(n-2*p+tsig_b)
      test_sigs3[i,sig,Al]=sig_h

      ############## Estimating F:
      cor_mat=  HDH@Q
      test_Fs1[i,sig,Al]= ( t21_b-t22_b  -sig_h*(cor_mat.trace()) )/(t0_b-((n-1)/n)*t1_b)

      alpha_star=(sig_h*(t0_b-((n-1)/n)*V0))/( sig_h*(t0_b+((n-1)/n)*(t1_b-2*V0))+ ( t21_b-t22_b  -sig_h*(cor_mat.trace()) ) )
      alpha_star=np.maximum( np.minimum(1,alpha_star),0.01)

      cor_mat=  HDH@H_mat_inv_b
      test_Fs2[i,sig,Al]= ( t21_b-t22_b  -sig_h*(cor_mat.trace()) )/(t0_b-((n-1)/n)*t1_b)


      ##############################


      z_OLS=Xst@beta_OLS
      z_SOLS1=Xst@beta_SOLS1
      z_SOLS2=Xst@beta_SOLS2


      test_sup[i,sig,Al]=np.mean( G(z_OLS,a)-  mtes*z_OLS )
      test_semi1[i,sig,Al]=np.mean( G(z_SOLS1,a)-  mtes*z_SOLS1 )
      test_semi2[i,sig,Al]=np.mean( G(z_SOLS2,a)-  mtes*z_SOLS2 )


      test_null[i,sig,Al]=G(g_inv(yh_null,a),a)-g_inv(yh_null,a)*mu0




    if i%50==49:
      print(i+1,'samples so far')


print('Simulation Finished')

for i in range(Samp_size):
  for sig in range(sig_lev):
    for Al in range(A_lev):
      test_Hyb[i,sig,Al]=test_sup[i,sig,Al]
      test_Hyb2[i,sig,Al]=test_sup[i,sig,Al]

      if ((n-1)/n)*test_Fs1[i,sig,Al]<test_sigs3[i,sig,Al]:
        test_Hyb[i,sig,Al]=test_semi2[i,sig,Al]

      if ((n-1)/n)*test_Fs2[i,sig,Al]<test_sigs3[i,sig,Al]:
        test_Hyb2[i,sig,Al]=test_semi2[i,sig,Al]



fig = plt.figure()
gs = fig.add_gridspec(nrows=1, ncols=2, wspace=0.15)
axs = gs.subplots(sharex=False, sharey=False)

fig.set_size_inches(15,6)
s1=1.5
s2=5
s4=11


y1=np.nanmean(test_sup,0)
y2=np.nanmean(test_semi1,0)
y3=np.nanmean(test_semi2,0)
y4=np.nanmean(test_Hyb,0)
nullerrs=np.nanmean(test_null,0)


d=1
a=0
aa=A_Vals[d] 
mtes=g(Zst,aa)
dtes=g_tag(Zst,aa)
mu0=np.mean(mtes)
Rb= np.mean( G(Zst,aa)-mtes*Zst )

x2=(Sig_Vals[:,d])**2

y11=y1[:,d]-Rb
y21=y2[:,d]-Rb
y31=y3[:,d]-Rb
y41=y4[:,d]-Rb
nullerr= nullerrs[0,d]-Rb  #R0-Rb

axs[a].plot(x2,y11,'ro--', linewidth=s1, markersize=s2)
axs[a].plot(x2,y21,'o--', linewidth=s1, markersize=s2, color='green')
axs[a].plot(x2,y31,'o--', linewidth=s1, markersize=s2, color='blue')
axs[a].plot(x2,y41,'yo--', linewidth=s1, markersize=s2)
axs[a].hlines(nullerr,x2[0],x2[-1],linewidth=s1, color='black',linestyle='--')
axs[a].set_title('ELU Link, '+r'$a=4$', fontsize=15)
axs[a].legend( [r'$R(\hat{\beta})$', r'$R(\tilde{\beta})$', r'$R(\breve{\beta})$', r'$R(\beta^D)$', r'$R(0)$'],   fontsize=s4)
axs[a].set_xlabel(r'$\sigma^2$', fontsize=s4)




d=0
a=1
aa=A_Vals[d]  
mtes=g(Zst,aa)
dtes=g_tag(Zst,aa)
mu0=np.mean(mtes)
Rb= np.mean( G(Zst,aa)-mtes*Zst )

x2=(Sig_Vals[:,d])**2

y11=y1[:,d]-Rb
y21=y2[:,d]-Rb
y31=y3[:,d]-Rb
y41=y4[:,d]-Rb
nullerr= nullerrs[0,d]-Rb  #R0-Rb

axs[a].plot(x2,y11,'ro--', linewidth=s1, markersize=s2)
axs[a].plot(x2,y21,'o--', linewidth=s1, markersize=s2, color='green')
axs[a].plot(x2,y31,'o--', linewidth=s1, markersize=s2, color='blue')
axs[a].plot(x2,y41,'yo--', linewidth=s1, markersize=s2)
axs[a].hlines(nullerr,x2[0],x2[-1],linewidth=s1, color='black',linestyle='--')
axs[a].set_title('ELU Link, '+r'$a=1$', fontsize=15)
axs[a].legend( [r'$R(\hat{\beta})$', r'$R(\tilde{\beta})$', r'$R(\breve{\beta})$', r'$R(\beta^D)$', r'$R(0)$'],   fontsize=s4)
axs[a].set_xlabel(r'$\sigma^2$', fontsize=s4)
